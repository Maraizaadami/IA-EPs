library(arules)
naive <- function(dataset, query) {
colId = ncol(dataset)
classes = unique(dataset[,colId])
P = rep(0, length(classes))
for (i in 1:length(classes)) {
P_classe_i = sum(dataset[,colId] == classes[i]) / nrow(dataset)
prod = 1
for (j in 1:length(query)) {
if (query[j] != "?") {
P_aj_given_classe_i = sum(dataset[,j] == query[j] & dataset[,colId] == classes[i])/sum(dataset[,colId] == classes[i])
prod = prod * P_aj_given_classe_i
}
}
prod = prod * P_classe_i
P[i] = prod
}
ret = list()
ids = sort.list(classes)
ret$classes = classes[ids]
ret$prob = P[ids] / sum(P[ids])
return (ret)
}
View(naive)
function(dataset, query) {
colId = ncol(dataset)
classes = unique(dataset[,colId])
P = rep(0, length(classes))
for (i in 1:length(classes)) {
P_classe_i = sum(dataset[,colId] == classes[i]) / nrow(dataset)
prod = 1
for (j in 1:length(query)) {
if (query[j] != "?") {
P_aj_given_classe_i = sum(dataset[,j] == query[j] & dataset[,colId] == classes[i])/sum(dataset[,colId] == classes[i])
prod = prod * P_aj_given_classe_i
}
}
prod = prod * P_classe_i
P[i] = prod
}
ret = list()
ids = sort.list(classes)
ret$classes = classes[ids]
ret$prob = P[ids] / sum(P[ids])
return (ret)
}
dataDisc <- discretizeDF(teste, methods = list(
Temperatura = list(method = "fixed", breaks = c(-Inf, 37.5, Inf),
labels = c("normal", "febre"))),
default = list(method = "none")
)
View(naive)
function(dataset, query) {
colId = ncol(dataset)
classes = unique(dataset[,colId])
P = rep(0, length(classes))
for (i in 1:length(classes)) {
P_classe_i = sum(dataset[,colId] == classes[i]) / nrow(dataset)
prod = 1
for (j in 1:length(query)) {
if (query[j] != "?") {
P_aj_given_classe_i = sum(dataset[,j] == query[j] & dataset[,colId] == classes[i])/sum(dataset[,colId] == classes[i])
prod = prod * P_aj_given_classe_i
}
}
prod = prod * P_classe_i
P[i] = prod
}
ret = list()
ids = sort.list(classes)
ret$classes = classes[ids]
ret$prob = P[ids] / sum(P[ids])
return (ret)
}
function(dataset, query) {
colId = ncol(dataset)
classes = unique(dataset[,colId])
P = rep(0, length(classes))
for (i in 1:length(classes)) {
P_classe_i = sum(dataset[,colId] == classes[i]) / nrow(dataset)
prod = 1
for (j in 1:length(query)) {
if (query[j] != "?") {
P_aj_given_classe_i = sum(dataset[,j] == query[j] & dataset[,colId] == classes[i])/sum(dataset[,colId] == classes[i])
prod = prod * P_aj_given_classe_i
}
}
prod = prod * P_classe_i
P[i] = prod
}
ret = list()
ids = sort.list(classes)
ret$classes = classes[ids]
ret$prob = P[ids] / sum(P[ids])
return (ret)
}
dataDisc <- discretizeDF(dataset, methods = list(
Temperatura = list(method = "fixed", breaks = c(-Inf, 37.5, Inf),
labels = c("normal", "febre"))),
default = list(method = "none")
)
dataDisc <- discretizeDF(treino, methods = list(
Temperatura = list(method = "fixed", breaks = c(-Inf, 37.5, Inf),
labels = c("normal", "febre"))),
default = list(method = "none")
)
res = naive(treino, treino[i,1:6])
dataDisc <- discretizeDF(treino, methods = list(
Temperatura = list(method = "fixed", breaks = c(-Inf, 37.5, Inf),
labels = c("normal", "febre"))),
default = list(method = "none")
)
discretizedTreino = discretizeDF(treino, methods = dataDisc)
res = naive(treinoMatrix, treinoMatrix[i,1:6])
View(res)
